@startuml

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

LAYOUT_WITH_LEGEND()

title Component diagram for Smart home system

Person(customer, "Customer", "Пользователь умного дома")

Container(webApp, "Web application", "React", "Позволяет управлять климатом в доме")
Container(bff, "Backend for frontend", "Node.js", "REST API для React SPA")
Container(staticServer, "Static Content Server", "Nginx, S3, CDN", "Обслуживает статические файлы для SPA")
Container(sensor, "Sensor", "Датчик температуры", "Датчик отопления")
Container(kuskGateway, "Kusk API Gateway", "Kusk", "Управляет и маршрутизирует API-запросы к микросервисам")
ContainerDb(db, "Database", "PostgreSQL", "Хранит данные датчиков, пользователей и устройств")

Container_Boundary(webApp_boundary, "Web application") {
  Component(homePanel, "Home panel", "React", "Основная панель управления климатом")
  Component(userProfile, "User profile", "React", "Управление профилем пользователя")
  Component(devicesList, "Devices list", "React", "Список устройств")
  Component(deviceDetails, "Device details", "React", "Детали устройства")
  Component(analytics, "Analytics", "React", "Аналитика климата дома")  
}

Container_Boundary(telemetry, "Telemetry Service") {
  Component(telemetrySensorData, "Sensor data", "Node.js", "Получает данные от датчиков")
  Component(telemetryDataProcessing, "Data processing", "Node.js", "Обрабатывает данные")
  Component(telemetryDataAnalysis, "Data analysis", "Node.js", "Анализирует данные")
  Component(telemetryAlerts, "Alerts", "Node.js", "Отправляет оповещения")
  Component(telemetryDataStorage, "Data storage", "Node.js", "Хранит данные в БД")
}

Container_Boundary(device, "Device Service") {
  Component(deviceData, "Device data", "Node.js", "Запрашивает данные от устройств")
  Component(deviceManagement, "Device management", "Node.js", "Управляет устройствами")
  Component(deviceCommands, "Device commands", "Node.js", "Отправляет команды устройствам")
  Component(deviceDataStorage, "Data storage", "Node.js", "Хранит данные в БД")
}

Rel(customer, staticServer, "Запрашивает статические файлы", "HTTPS")
Rel(customer, webApp, "Взаимодействует с", "HTTPS")
Rel(customer, sensor, "Имеет датчики в доме")
Rel(webApp, kuskGateway, "API-запросы", "HTTPS/REST")
Rel(kuskGateway, bff, "Маршрутизирует запросы", "HTTP (через Service)")
Rel(kuskGateway, telemetry, "Маршрутизирует запросы", "HTTP (через Service)")
Rel(kuskGateway, device, "Маршрутизирует запросы", "HTTP (через Service)")
Rel(bff, telemetry, "Синхронные API-вызовы", "HTTP/REST")
Rel(bff, device, "Синхронные API-вызовы", "HTTP/REST")

' Взаимодействие с базой данных
Rel(telemetryDataStorage, db, "Читает и пишет данные", "JDBC/SSL")
Rel(deviceDataStorage, db, "Читает и пишет данные", "JDBC/SSL")

' Внутренние взаимодействия компонентов телеметрии
Rel(telemetrySensorData, telemetryDataProcessing, "Передает данные")
Rel(telemetryDataProcessing, telemetryDataAnalysis, "Передает данные")
Rel(telemetryDataAnalysis, telemetryAlerts, "Передает данные")
Rel(telemetryDataProcessing, telemetryDataStorage, "Сохраняет данные")

' Внешние взаимодействия компонентов телеметрии
Rel(telemetrySensorData, sensor, "Получает данные", "HTTP/REST")
Rel(telemetryAlerts, bff, "Отправляет оповещения", "HTTP/REST")

' Внутренние взаимодействия компонентов устройства
Rel(deviceData, deviceManagement, "Обменивается данными")
Rel(deviceCommands, deviceManagement, "Обменивается данными")
Rel(deviceManagement, deviceDataStorage, "Сохраняет данные")
Rel(deviceManagement, deviceCommands, "Отправляет команды")

' Внешние взаимодействия компонентов устройства
Rel(deviceData, sensor, "Запрашивает данные", "MQTT")
Rel(deviceCommands, sensor, "Отправляет команды", "MQTT")

@enduml