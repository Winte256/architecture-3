@startuml

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

LAYOUT_WITH_LEGEND()

title Container diagram for Smart home system

Person(customer, "Customer", "Пользователь умного дома")
  
Container(sensor, "Sensor", "Датчик температуры", "Датчик отопления")
Container(webApp, "Web application", "React", "Позволяет управлять климатом в доме")

System_Boundary(c1, "Smart home system") {
  
  Container(staticServer, "Static Content Server", "Nginx, S3, CDN", "Обслуживает статические файлы (HTML, CSS, JS) для SPA")

  System_Boundary(c2, "Cluster") {
    
    Container(bff, "Backend for frontend", "Node.js", "REST API для React SPA")
    Container(telemetry, "Telemetry Service", "Node.js", "Сервис телеметрии")
    Container(device, "Device Service", "Node.js", "Сервис управления устройствами")

    Container(kuskGateway, "Kusk API Gateway", "Kusk", "Управляет и маршрутизирует API-запросы к микросервисам")
    
    ContainerDb(db, "Database", "PostgreSQL", "Хранит данные датчиков, пользователей и устройств")
  }
}

Rel(customer, staticServer, "Запрашивает статические файлы", "HTTPS")
Rel(customer, webApp, "Взаимодействует с", "HTTPS")
Rel(customer, sensor, "Имеет датчики в доме")

Rel(webApp, kuskGateway, "API-запросы", "HTTPS/REST")

Rel(kuskGateway, bff, "Маршрутизирует запросы", "HTTP (через Service)")

Rel(bff, telemetry, "Синхронные API-вызовы", "HTTP/REST")
Rel(bff, device, "Синхронные API-вызовы", "HTTP/REST")

Rel(telemetry, db, "Читает и пишет данные", "JDBC/SSL")
Rel(device, db, "Читает и пишет данные", "JDBC/SSL")

Rel(device, sensor, "Запрашивает данные", "MQTT")

@enduml